#include "../Shaders/Utils/ReGizmoShaderUtils.cginc"

#pragma kernel Mesh_CameraCulling
#pragma kernel Font_CameraCulling

struct BoundingBox
{
    float3 Center;
    float3 Extents;
};

RWStructuredBuffer<BoundingBox> _DebugAABB;
#define DEBUG 1
 
int _Count;
float4 _CameraFrustum[6];
float2 _CameraClips;

float4x4 _ViewMatrix;
float4x4 _ProjectionMatrix;
float4x4 _I_VP;
float4x4 _VP;

inline bool box_inside_frustum( float3 center, float3 extents );

StructuredBuffer<MeshProperties> _MeshInput;
AppendStructuredBuffer<MeshProperties> _MeshOutput; 
[numthreads(128,1,1)]
void Mesh_CameraCulling (uint3 id : SV_DispatchThreadID)
{
    [branch] if (id.x >= _Count) return;

    MeshProperties ld = _MeshInput[id.x];

    #if DEBUG
    {
        BoundingBox bb = (BoundingBox)0;
        bb.Center = ld.Position;
        bb.Extents = ld.Scale;
        _DebugAABB[id.x] = bb;
    }
    #endif

    if (box_inside_frustum(ld.Position, ld.Scale))
    {
        _MeshOutput.Append(ld); 
    }
}

StructuredBuffer<CharData> _FontInput;
AppendStructuredBuffer<CharData> _FontOutput;
StructuredBuffer<TextData> _FontTextData;
StructuredBuffer<CharacterInfo> _FontCharacterInfos;
[numthreads(128,1,1)]
void Font_CameraCulling (uint3 id : SV_DispatchThreadID)
{
    [branch] if (id.x >= _Count) return;

    CharData cd = _FontInput[id.x];
    TextData td = _FontTextData[cd.TextID];
    CharacterInfo ci = _FontCharacterInfos[cd.CharIndex];

    static const float scale_factor = 2.7;

    float4 centerClip = mul(_VP, float4(td.Position, 1.0));
    float camDist = centerClip.w;

    float4 advanceOffset = float4(cd.Advance - td.CenterOffset, 0, 0, 0) * scale_factor;
    float4 size = ci.Size * td.Scale * scale_factor;

    float4 c1 = (float4(size.x, -size.w, 0, 0) + advanceOffset) * camDist;
    float4 c2 = (float4(size.y, -size.z, 0, 0) + advanceOffset) * camDist;

    c1.xy /= _ScreenParams.xy;
    c2.xy /= _ScreenParams.xy;

    c1.y = -c1.y;
    c2.y = -c2.y;

    float4 c1_world = mul(_I_VP, c1);
    float4 c2_world = mul(_I_VP, c2);

    float3 center = td.Position + (c1_world.xyz + c2_world.xyz) * 0.5;
    float3 extents = (c1_world.xyz - c2_world.xyz);

    #if DEBUG
    {
        BoundingBox bb = (BoundingBox)0;
        bb.Center = center;
        bb.Extents = extents;
        _DebugAABB[id.x] = bb;
    }
    #endif

    if (box_inside_frustum(center, extents))
    {
        _FontOutput.Append(cd);
    }
}

bool within(float lower, float value, float higher)
{
    return value >= lower && value <= higher;
}

// Based on: https://www.iquilezles.org/www/articles/frustumcorrect/frustumcorrect.htm
inline bool box_inside_frustum( float3 center, float3 extents )
{
    float3 bounds_min = center - extents;
    float3 bounds_max = center + extents;
    
    int count = 0;
    for (int i = 0; i < 6; i++)
    {
        count += ((dot( _CameraFrustum[i], float4(bounds_min.x, bounds_min.y, bounds_min.z, 1.0f) ) < 0.0 ) ? 1 : 0);
        count += ((dot( _CameraFrustum[i], float4(bounds_max.x, bounds_min.y, bounds_min.z, 1.0f) ) < 0.0 ) ? 1 : 0);
        count += ((dot( _CameraFrustum[i], float4(bounds_min.x, bounds_max.y, bounds_min.z, 1.0f) ) < 0.0 ) ? 1 : 0);
        count += ((dot( _CameraFrustum[i], float4(bounds_max.x, bounds_max.y, bounds_min.z, 1.0f) ) < 0.0 ) ? 1 : 0);
        count += ((dot( _CameraFrustum[i], float4(bounds_min.x, bounds_min.y, bounds_max.z, 1.0f) ) < 0.0 ) ? 1 : 0);
        count += ((dot( _CameraFrustum[i], float4(bounds_max.x, bounds_min.y, bounds_max.z, 1.0f) ) < 0.0 ) ? 1 : 0);
        count += ((dot( _CameraFrustum[i], float4(bounds_min.x, bounds_max.y, bounds_max.z, 1.0f) ) < 0.0 ) ? 1 : 0);
        count += ((dot( _CameraFrustum[i], float4(bounds_max.x, bounds_max.y, bounds_max.z, 1.0f) ) < 0.0 ) ? 1 : 0);
        if (count == 8) break;
    }

    return count != 8;
}