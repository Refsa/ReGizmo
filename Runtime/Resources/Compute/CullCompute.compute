#include "../Shaders/Utils/ShaderProperties.cginc"

#pragma kernel Mesh_CameraCulling
#pragma kernel Font_CameraCulling
 
int _Count;
float4 _CameraFrustum[6];
float2 _CameraClips;

inline bool box_inside_frustum( float3 center, float3 extents );

StructuredBuffer<MeshProperties> _MeshInput;
AppendStructuredBuffer<MeshProperties> _MeshOutput; 
[numthreads(64,1,1)]
void Mesh_CameraCulling (uint3 id : SV_DispatchThreadID)
{
    [branch] if (id.x >= _Count) return;

    MeshProperties ld = _MeshInput[id.x];

    if (box_inside_frustum(ld.Position, ld.Scale))
    {
        _MeshOutput.Append(ld);
    }
}

StructuredBuffer<CharData> _FontInput;
AppendStructuredBuffer<CharData> _FontOutput;
StructuredBuffer<TextData> _FontTextData;
[numthreads(64,1,1)]
void Font_CameraCulling (uint3 id : SV_DispatchThreadID)
{
    [branch] if (id.x >= _Count) return;

    CharData cd = _FontInput[id.x];
    TextData td = _FontTextData[cd.CharIndex];

    _FontOutput.Append(cd);
}

// Based on: https://www.iquilezles.org/www/articles/frustumcorrect/frustumcorrect.htm
inline bool box_inside_frustum( float3 center, float3 extents )
{
    float3 bounds_min = center - extents;
    float3 bounds_max = center + extents;
    
    int count = 0;
    for (int i = 0; i < 6; i++)
    {
        count += ((dot( _CameraFrustum[i], float4(bounds_min.x, bounds_min.y, bounds_min.z, 1.0f) ) < 0.0 ) ? 1 : 0);
        count += ((dot( _CameraFrustum[i], float4(bounds_max.x, bounds_min.y, bounds_min.z, 1.0f) ) < 0.0 ) ? 1 : 0);
        count += ((dot( _CameraFrustum[i], float4(bounds_min.x, bounds_max.y, bounds_min.z, 1.0f) ) < 0.0 ) ? 1 : 0);
        count += ((dot( _CameraFrustum[i], float4(bounds_max.x, bounds_max.y, bounds_min.z, 1.0f) ) < 0.0 ) ? 1 : 0);
        count += ((dot( _CameraFrustum[i], float4(bounds_min.x, bounds_min.y, bounds_max.z, 1.0f) ) < 0.0 ) ? 1 : 0);
        count += ((dot( _CameraFrustum[i], float4(bounds_max.x, bounds_min.y, bounds_max.z, 1.0f) ) < 0.0 ) ? 1 : 0);
        count += ((dot( _CameraFrustum[i], float4(bounds_min.x, bounds_max.y, bounds_max.z, 1.0f) ) < 0.0 ) ? 1 : 0);
        count += ((dot( _CameraFrustum[i], float4(bounds_max.x, bounds_max.y, bounds_max.z, 1.0f) ) < 0.0 ) ? 1 : 0);

    }
    [branch] if (count == 8) return false;

    return true;
}